{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Processing R Provider Processing provider for R scripts plugin for QGIS . The plugin allows execution of R scripts directly from QGIS on data loaded in QGIS. Installation The plugin is available QGIS Python Plugins Repository here . It can also be installed directly from QGIS via the Plugins tool. Building from source for offline install can be done by downloading the source code and running command: make zip in the main directory. The produced zip file can then be installed in QGIS from Plugins tool in the Install from zip window. Contributors List of project contributors on GitHub. R R is a free and open-source software environment for statistical computing and graphics. It has to be installed separately ( Download and Install R ), together with a few necessary libraries. The beauty of Processing implementation is that you can add your scripts, simple or complex ones, and they may then be used as any other module, piped into more complex workflows, etc. Test some of the preinstalled examples, if you have R already installed. Settings for the plugin Linux On Linux, the toolbox should find system installation of R on its own. Windows If R is installed in the expected path (e.g. \"C:\\PROGRAM FILES\\R\\\"), the plugin tries to detect the R installation automatically. Otherwise, it is necessary to set the setting \"R folder\" to the correct folder, as seen on the image. The correct folder is the one under which folders \"bin\", \"doc\", \"etc\" and others exist. Generally, it is a folder that has R's version in its name.","title":"Home"},{"location":"#processing-r-provider","text":"Processing provider for R scripts plugin for QGIS . The plugin allows execution of R scripts directly from QGIS on data loaded in QGIS.","title":"Processing R Provider"},{"location":"#installation","text":"The plugin is available QGIS Python Plugins Repository here . It can also be installed directly from QGIS via the Plugins tool. Building from source for offline install can be done by downloading the source code and running command: make zip in the main directory. The produced zip file can then be installed in QGIS from Plugins tool in the Install from zip window.","title":"Installation"},{"location":"#contributors","text":"List of project contributors on GitHub.","title":"Contributors"},{"location":"#r","text":"R is a free and open-source software environment for statistical computing and graphics. It has to be installed separately ( Download and Install R ), together with a few necessary libraries. The beauty of Processing implementation is that you can add your scripts, simple or complex ones, and they may then be used as any other module, piped into more complex workflows, etc. Test some of the preinstalled examples, if you have R already installed.","title":"R"},{"location":"#settings-for-the-plugin","text":"","title":"Settings for the plugin"},{"location":"#linux","text":"On Linux, the toolbox should find system installation of R on its own.","title":"Linux"},{"location":"#windows","text":"If R is installed in the expected path (e.g. \"C:\\PROGRAM FILES\\R\\\"), the plugin tries to detect the R installation automatically. Otherwise, it is necessary to set the setting \"R folder\" to the correct folder, as seen on the image. The correct folder is the one under which folders \"bin\", \"doc\", \"etc\" and others exist. Generally, it is a folder that has R's version in its name.","title":"Windows"},{"location":"changelog/","text":"Changelog 3.0.0 Added support for QgsProcessingParameter* strings, that can be used to define script parameters. Better handling of errors in R scripts. New script parameter ##script_title , that can be used to define string under which the script is listed in QGIS Toolbox. 2.3.0 Introduces support for QgsProcessingParameterPoint as an input variable, set parameter help strings under QGIS 3.16 or later 2.2.2 Make sure that FolderDestination and FileDestination folders exist, otherwise that would have to be handled by R script causes issue if writing to temp directory which does not exist 2.2.1 Fix file based outputs, R version number reporting 2.2.0 Add support for file based outputs. 2.1.0 Added support for literal enums, skipping package loading, additional output types (e.g. strings and numbers). 2.0.0 Many fixes, algorithms have support for choice between sf/raster or rgdal for loading inputs 1.0.7 Fix 3.4 compatibility 1.0.6 Workaround API break in QGIS, which breaks existing scripts 1.0.5 Allow use of R development versions 1.0.4 Resurrect ability to run on selected features only 1.0.3 Remove activation setting for provider (disable plugin instead!), fix memory layer handling, simpler example script 1.0.2 Fix vector paths under windows","title":"Changelog"},{"location":"changelog/#changelog","text":"3.0.0 Added support for QgsProcessingParameter* strings, that can be used to define script parameters. Better handling of errors in R scripts. New script parameter ##script_title , that can be used to define string under which the script is listed in QGIS Toolbox. 2.3.0 Introduces support for QgsProcessingParameterPoint as an input variable, set parameter help strings under QGIS 3.16 or later 2.2.2 Make sure that FolderDestination and FileDestination folders exist, otherwise that would have to be handled by R script causes issue if writing to temp directory which does not exist 2.2.1 Fix file based outputs, R version number reporting 2.2.0 Add support for file based outputs. 2.1.0 Added support for literal enums, skipping package loading, additional output types (e.g. strings and numbers). 2.0.0 Many fixes, algorithms have support for choice between sf/raster or rgdal for loading inputs 1.0.7 Fix 3.4 compatibility 1.0.6 Workaround API break in QGIS, which breaks existing scripts 1.0.5 Allow use of R development versions 1.0.4 Resurrect ability to run on selected features only 1.0.3 Remove activation setting for provider (disable plugin instead!), fix memory layer handling, simpler example script 1.0.2 Fix vector paths under windows","title":"Changelog"},{"location":"ex_console_output/","text":"Example with tool console log This script takes input vector data and one of its fields. The result is a tool console log with summary statistics for a given field of the layer. Script ##Basic statistics=group ##Statistic summary console=name ##Layer=vector ##Field=Field Layer Summary_statistics <- data.frame(rbind( sum(Layer[[Field]]), length(Layer[[Field]]), length(unique(Layer[[Field]])), min(Layer[[Field]]), max(Layer[[Field]]), max(Layer[[Field]])-min(Layer[[Field]]), mean(Layer[[Field]]), median(Layer[[Field]]), sd(Layer[[Field]])), row.names=c(\"Sum:\",\"Count:\",\"Unique values:\",\"Minimum value:\",\"Maximum value:\",\"Range:\",\"Mean value:\",\"Median value:\",\"Standard deviation:\")) colnames(Summary_statistics) <- c(Field) >Summary_statistics Script lines description Basic statistics is the group of the algorithm. Statistic summary console is the name of the algorithm. Layer is the input vector layer. Field is the name of a field from Layer . Create data.frame with calculated statistics and assign correct row names. Give the data.frame correct colname, the name of the field. Print the created data.frame to the tool console log. The output will be shown in the tool console log.","title":"Example with tool console log"},{"location":"ex_console_output/#example-with-tool-console-log","text":"This script takes input vector data and one of its fields. The result is a tool console log with summary statistics for a given field of the layer.","title":"Example with tool console log"},{"location":"ex_console_output/#script","text":"##Basic statistics=group ##Statistic summary console=name ##Layer=vector ##Field=Field Layer Summary_statistics <- data.frame(rbind( sum(Layer[[Field]]), length(Layer[[Field]]), length(unique(Layer[[Field]])), min(Layer[[Field]]), max(Layer[[Field]]), max(Layer[[Field]])-min(Layer[[Field]]), mean(Layer[[Field]]), median(Layer[[Field]]), sd(Layer[[Field]])), row.names=c(\"Sum:\",\"Count:\",\"Unique values:\",\"Minimum value:\",\"Maximum value:\",\"Range:\",\"Mean value:\",\"Median value:\",\"Standard deviation:\")) colnames(Summary_statistics) <- c(Field) >Summary_statistics","title":"Script"},{"location":"ex_console_output/#script-lines-description","text":"Basic statistics is the group of the algorithm. Statistic summary console is the name of the algorithm. Layer is the input vector layer. Field is the name of a field from Layer . Create data.frame with calculated statistics and assign correct row names. Give the data.frame correct colname, the name of the field. Print the created data.frame to the tool console log. The output will be shown in the tool console log.","title":"Script lines description"},{"location":"ex_file_output/","text":"Example with table output This script takes input vector data and one of its fields. The result is a table with summary statistics for a given field of the layer. Script ##Basic statistics=group ##Statistic table=name ##Layer=vector ##Field=Field Layer ##Stat_file=Output file csv ##Stat=Output table noprompt Summary_statistics <- data.frame(rbind( sum(Layer[[Field]]), length(Layer[[Field]]), length(unique(Layer[[Field]])), min(Layer[[Field]]), max(Layer[[Field]]), max(Layer[[Field]])-min(Layer[[Field]]), mean(Layer[[Field]]), median(Layer[[Field]]), sd(Layer[[Field]])), row.names=c(\"Sum:\",\"Count:\",\"Unique values:\",\"Minimum value:\",\"Maximum value:\",\"Range:\",\"Mean value:\",\"Median value:\",\"Standard deviation:\")) colnames(Summary_statistics) <- c(Field) write.csv2(Summary_statistics, Stat_file, row.names = FALSE, na =\"\") Stat <- Stat_file Script lines description Basic statistics is the group of the algorithm. Statistic table is the name of the algorithm. Layer is the input vector layer. Field is the name of a field from Layer . Stat_file is the name of output that will be selected by user to store result. Stat is the name of output that will be created and returned to QGIS. Create data.frame with calculated statistics and assign correct row names. Give the data.frame correct colname, the name of the field. Write the created data.frame to output file ( Stat_file ) with a controlled formatting. Assign the output file path to table output ( Stat ) to be presented in QGIS The output will be presented in QGIS as a table with a controlled formatting.","title":"Example with file output"},{"location":"ex_file_output/#example-with-table-output","text":"This script takes input vector data and one of its fields. The result is a table with summary statistics for a given field of the layer.","title":"Example with table output"},{"location":"ex_file_output/#script","text":"##Basic statistics=group ##Statistic table=name ##Layer=vector ##Field=Field Layer ##Stat_file=Output file csv ##Stat=Output table noprompt Summary_statistics <- data.frame(rbind( sum(Layer[[Field]]), length(Layer[[Field]]), length(unique(Layer[[Field]])), min(Layer[[Field]]), max(Layer[[Field]]), max(Layer[[Field]])-min(Layer[[Field]]), mean(Layer[[Field]]), median(Layer[[Field]]), sd(Layer[[Field]])), row.names=c(\"Sum:\",\"Count:\",\"Unique values:\",\"Minimum value:\",\"Maximum value:\",\"Range:\",\"Mean value:\",\"Median value:\",\"Standard deviation:\")) colnames(Summary_statistics) <- c(Field) write.csv2(Summary_statistics, Stat_file, row.names = FALSE, na =\"\") Stat <- Stat_file","title":"Script"},{"location":"ex_file_output/#script-lines-description","text":"Basic statistics is the group of the algorithm. Statistic table is the name of the algorithm. Layer is the input vector layer. Field is the name of a field from Layer . Stat_file is the name of output that will be selected by user to store result. Stat is the name of output that will be created and returned to QGIS. Create data.frame with calculated statistics and assign correct row names. Give the data.frame correct colname, the name of the field. Write the created data.frame to output file ( Stat_file ) with a controlled formatting. Assign the output file path to table output ( Stat ) to be presented in QGIS The output will be presented in QGIS as a table with a controlled formatting.","title":"Script lines description"},{"location":"ex_number_string_output/","text":"Example with number and string outputs This script takes input vector data and one of its fields. The result is the minimum and maximum for a given field of the layer. Script ##Basic statistics=group ##Min_Max=name ##Layer=vector ##Field=Field Layer ##Min=output number ##Max=output number ##Summary=output string Min <- min(Layer[[Field]]) Max <- max(Layer[[Field]]) Summary <- paste(Min, \"to\", Max, sep = \" \") Script lines description Basic statistics is the group of the algorithm. Min_Max is the name of the algorithm. Layer is the input vector layer. Field is the name of a field from Layer . Min is the name of the minimum output that will be created and returned to QGIS. Max is the name of the maximum output that will be created and returned to QGIS. Summary is the name of the string output that will be created and returned to QGIS. Calculate minimum Calculate maximum Create the string The outputs will be presented in QGIS as a dictionnary.","title":"Example with number and string outputs"},{"location":"ex_number_string_output/#example-with-number-and-string-outputs","text":"This script takes input vector data and one of its fields. The result is the minimum and maximum for a given field of the layer.","title":"Example with number and string outputs"},{"location":"ex_number_string_output/#script","text":"##Basic statistics=group ##Min_Max=name ##Layer=vector ##Field=Field Layer ##Min=output number ##Max=output number ##Summary=output string Min <- min(Layer[[Field]]) Max <- max(Layer[[Field]]) Summary <- paste(Min, \"to\", Max, sep = \" \")","title":"Script"},{"location":"ex_number_string_output/#script-lines-description","text":"Basic statistics is the group of the algorithm. Min_Max is the name of the algorithm. Layer is the input vector layer. Field is the name of a field from Layer . Min is the name of the minimum output that will be created and returned to QGIS. Max is the name of the maximum output that will be created and returned to QGIS. Summary is the name of the string output that will be created and returned to QGIS. Calculate minimum Calculate maximum Create the string The outputs will be presented in QGIS as a dictionnary.","title":"Script lines description"},{"location":"ex_plot/","text":"Example of graphs output This scripts takes input vector data and randomly samples Size points over it. The result is returned as a vector layer. s Script ##Basic statistics=group ##Graphs=name ##output_plots_to_html ##Layer=vector ##Field=Field Layer qqnorm(Layer[[Field]]) qqline(Layer[[Field]]) Script lines description Basic statistics is the group of the algorithm. Graphs is the name of the algorithm. The script output plot or plots. Layer is the input vector layer. Field is the name of the field from Layer whose values will be plotted. Produce a standard QQ plot of the values from Field of Layer . Add a line to a \u201ctheoretical\u201d, by default normal, quantile-quantile plot which passes through the probs quantiles, by default the first and third quartiles. The plot is automatically added to the Result Viewer of Processing, and it can be open the location shown in the image.","title":"Example of graphs output"},{"location":"ex_plot/#example-of-graphs-output","text":"This scripts takes input vector data and randomly samples Size points over it. The result is returned as a vector layer. s","title":"Example of graphs output"},{"location":"ex_plot/#script","text":"##Basic statistics=group ##Graphs=name ##output_plots_to_html ##Layer=vector ##Field=Field Layer qqnorm(Layer[[Field]]) qqline(Layer[[Field]])","title":"Script"},{"location":"ex_plot/#script-lines-description","text":"Basic statistics is the group of the algorithm. Graphs is the name of the algorithm. The script output plot or plots. Layer is the input vector layer. Field is the name of the field from Layer whose values will be plotted. Produce a standard QQ plot of the values from Field of Layer . Add a line to a \u201ctheoretical\u201d, by default normal, quantile-quantile plot which passes through the probs quantiles, by default the first and third quartiles. The plot is automatically added to the Result Viewer of Processing, and it can be open the location shown in the image.","title":"Script lines description"},{"location":"ex_raster_output/","text":"Example with raster output This scripts takes point layer and a field name as an input and performs automatic kriging. The returned value is a raster layer of interpolated values. Script ##Basic statistics=group ##Krige value=name ##load_vector_using_rgdal ##Layer=vector ##Field=Field Layer ##Output=output raster library(\"automap\") table = as.data.frame(Layer) coordinates(table)= ~coords.x1+coords.x2 c = Layer[[Field]] kriging_result = autoKrige(c~1, table) prediction = raster(kriging_result$krige_output) Output = prediction","title":"Example with raster output"},{"location":"ex_raster_output/#example-with-raster-output","text":"This scripts takes point layer and a field name as an input and performs automatic kriging. The returned value is a raster layer of interpolated values.","title":"Example with raster output"},{"location":"ex_raster_output/#script","text":"##Basic statistics=group ##Krige value=name ##load_vector_using_rgdal ##Layer=vector ##Field=Field Layer ##Output=output raster library(\"automap\") table = as.data.frame(Layer) coordinates(table)= ~coords.x1+coords.x2 c = Layer[[Field]] kriging_result = autoKrige(c~1, table) prediction = raster(kriging_result$krige_output) Output = prediction","title":"Script"},{"location":"ex_table_output/","text":"Example with table output This script takes input vector data and one of its fields. The result is a table with summary statistics for a given field of the layer. Script ##Basic statistics=group ##Statistic table=name ##Layer=vector ##Field=Field Layer ##Stat=Output table Summary_statistics <- data.frame(rbind( sum(Layer[[Field]]), length(Layer[[Field]]), length(unique(Layer[[Field]])), min(Layer[[Field]]), max(Layer[[Field]]), max(Layer[[Field]])-min(Layer[[Field]]), mean(Layer[[Field]]), median(Layer[[Field]]), sd(Layer[[Field]])), row.names=c(\"Sum:\",\"Count:\",\"Unique values:\",\"Minimum value:\",\"Maximum value:\",\"Range:\",\"Mean value:\",\"Median value:\",\"Standard deviation:\")) colnames(Summary_statistics) <- c(Field) Stat <- Summary_statistics Script lines description Basic statistics is the group of the algorithm. Statistic table is the name of the algorithm. Layer is the input vector layer. Field is the name of a field from Layer . Stat is the name of output that will be created and returned to QGIS. Create data.frame with calculated statistics and assign correct row names. Give the data.frame correct colname, the name of the field. Assign the created data.frame to output variable ( Stat ). The output will be presented in QGIS as a table.","title":"Example with table output"},{"location":"ex_table_output/#example-with-table-output","text":"This script takes input vector data and one of its fields. The result is a table with summary statistics for a given field of the layer.","title":"Example with table output"},{"location":"ex_table_output/#script","text":"##Basic statistics=group ##Statistic table=name ##Layer=vector ##Field=Field Layer ##Stat=Output table Summary_statistics <- data.frame(rbind( sum(Layer[[Field]]), length(Layer[[Field]]), length(unique(Layer[[Field]])), min(Layer[[Field]]), max(Layer[[Field]]), max(Layer[[Field]])-min(Layer[[Field]]), mean(Layer[[Field]]), median(Layer[[Field]]), sd(Layer[[Field]])), row.names=c(\"Sum:\",\"Count:\",\"Unique values:\",\"Minimum value:\",\"Maximum value:\",\"Range:\",\"Mean value:\",\"Median value:\",\"Standard deviation:\")) colnames(Summary_statistics) <- c(Field) Stat <- Summary_statistics","title":"Script"},{"location":"ex_table_output/#script-lines-description","text":"Basic statistics is the group of the algorithm. Statistic table is the name of the algorithm. Layer is the input vector layer. Field is the name of a field from Layer . Stat is the name of output that will be created and returned to QGIS. Create data.frame with calculated statistics and assign correct row names. Give the data.frame correct colname, the name of the field. Assign the created data.frame to output variable ( Stat ). The output will be presented in QGIS as a table.","title":"Script lines description"},{"location":"ex_vector_output/","text":"Example with vector output This scripts takes input vector data and randomly samples Size points over it. The result is returned as a vector layer. Script ##Point pattern analysis=group ##Sample random points=name ##load_vector_using_rgdal ##Layer=vector ##Size=number 10 ##Output= output vector pts = spsample(Layer,Size,type=\"random\") Output = SpatialPointsDataFrame(pts, as.data.frame(pts)) Script lines description Point pattern analysis is the group of the algorithm. Sample random points is the name of the algorithm. The script does not use sf package; it instead uses packages sp and rgdal . Layer is the input vector layer. Size is the numerical parameter with a default value of 10. Output is the vector layer that will be created by the algorithm. Call the spsample function of the sp library and pass it to all the input defined above. Create the output vector with the SpatialPointsDataFrame function. That\u2019s it! Just run the algorithm with a vector layer you have in the QGIS Legend, choose a number of the random point, and you will get them in the QGIS Map Canvas.","title":"Example with vector output"},{"location":"ex_vector_output/#example-with-vector-output","text":"This scripts takes input vector data and randomly samples Size points over it. The result is returned as a vector layer.","title":"Example with vector output"},{"location":"ex_vector_output/#script","text":"##Point pattern analysis=group ##Sample random points=name ##load_vector_using_rgdal ##Layer=vector ##Size=number 10 ##Output= output vector pts = spsample(Layer,Size,type=\"random\") Output = SpatialPointsDataFrame(pts, as.data.frame(pts))","title":"Script"},{"location":"ex_vector_output/#script-lines-description","text":"Point pattern analysis is the group of the algorithm. Sample random points is the name of the algorithm. The script does not use sf package; it instead uses packages sp and rgdal . Layer is the input vector layer. Size is the numerical parameter with a default value of 10. Output is the vector layer that will be created by the algorithm. Call the spsample function of the sp library and pass it to all the input defined above. Create the output vector with the SpatialPointsDataFrame function. That\u2019s it! Just run the algorithm with a vector layer you have in the QGIS Legend, choose a number of the random point, and you will get them in the QGIS Map Canvas.","title":"Script lines description"},{"location":"script-syntax/","text":"Script syntax The R scripts for the plugin use extension .rsx . These are classic R scripts with several metadata lines (starting with ## ) that define the interaction between QGIS and R. Metadata amongst other things specify how UI of the tool will look like. The script loads necessary packages by itself. Combination of sp and rgdal or sf for vector data and sp and rgdal or raster for raster data. Any other packages need to be directly loaded using library() command in the script body. Metadata The R script's file name is used to define the script name and id in the R processing provider. You can override these default metadata with these lines. ##script_name=name script_name is the name of the script; under this name, it will be listed in processing toolbox. It is also used to define the script id in the R processing provider. ##script_title=display_name script_title is the title of the script; under this title, it will be listed in processing toolbox. It overrides the name if it is defined after. ##group_name=group group_name is the name of the group of the script, which allows sorting of scripts into groups in processing toolbox. Script behaviour Several metadata lines define the general behaviour of the script. ##output_plots_to_html (older version of this metadata keyword is ##showplots ) defines that there will be graphical output from the script that will be presented as an HTML page with images. ##load_raster_using_rgdal (legacy alias ##dontuserasterpackage ) specifies that raster data should not be pased to R using raster package as RasterLayer or RasterBrick object. Raster data are instead read using rgdal into object SpatialGridDataFrame from sp . ##load_vector_using_rgdal specifies that vector data should not be pased to R using sf package as sf data.frame . Instead data are passed as Spatial?DataFrame (where ? is the type of vector object) from sp package. ##pass_filenames (legacy alias ##passfilenames ) specifies that data are not passed directly. Instead only their file names are passed. ##dont_load_any_packages specifies that no packages, besides what is directly specified in script, should be loaded. This means that neither of sf , raster , sp or rgdal packages is loaded automatically. If spatial data (either raster or vector) should be passed to this script, the metadata ##pass_filenames should be used as well. ##user1/repo1,user2/repo2=github_install allows instalation of R packages from GitHub using remotes . Multiple repos can be specified and divided by coma, white spaces around are stripped. The formats for repository specification are listed on remotes website . Inputs Simple specification The inputs to R script are specified as: variable_name=variable_type [default_value/from_variable] . This metadata line also specifies how tool UI will look in QGIS, as inputs are one section of the tool UI. In this specification variable_name is the name of the variable used in R script, variable_type is a type of input variable from possible input types (vector, raster, table, number, string, boolean, Field). This metadata line is based on the QGIS parameter asScriptCode / fromScriptCode string definition. The default_value is applicable to number, string, boolean, range, color folder and file inputs. The from variable_ applies to Field and must point to variable_name of vector input. So the inputs can look like this: ##Layer=vector specifies that there will be variable Layer that will be a vector. ##X=Field Layer specifies that variable X will be field name taken from Layer . ##Size=number 10 specifies that there will be variable Size that will be numeric, and a default value for Size will be 10 . ##Extent=extent specifies that there will be variable Extent that will be numeric of length 4 ( xmin , xmax , ymin and ymax values). ##CRS=crs specifies that there will be variable CRS that will be EPSG:____ string. ##Range=range 0,1 specifies that the Range variable will be a two numeric values vector with names (min/max values). The parameter accepts default values, e.g. 0,1 . A range widget will be displayed for setting the values. ##Color=color withopacity #FF0000CC specifies that the Color variable will be a text string of the chosen color in hexadecimal format. This parameter will display a color selection widget. The parameter accepts default values, for example #FF0000 . The opacity value depends on the withopacity option. ##Date_Time=datetime specifies that the Date_Time variable will be a POSIXct vector of length 1 of the date and time choosing from the datetime widget . The parameter does not accept default values, instead, the current date and time will set by default. Enum The basic enum syntax is ##var_enum=enum a;b;c to select from values a , b or c . The value of var_enum in this case will be integer indicated position of the selected item in a list. So for example, if a is selected the value of var_enum will be 0 . The approach described above works well for a wide range of applications but for R it is often not ideal. That is a reason why a new type of enum is available in script syntax. The syntax is ##var_enum_string=enum literal a;b;c . The important part here is the keyword literal (or more precisely enum literal ) which specifies that the value from the select box to var_enum_string should be passed as a string. So if b is selected, then the value of var_enum_string will be \"a\" . Advanced specification The inputs to R script are specified as: QgsProcessingParameter|name|description|other_parameters_separated_by_pipe . The other parameter_ separated_ by_ pipe_ can contain the QgsProcessingParameter specific parameters. This metadata line is based on the QGIS definitions used in description file used by GRASS7, SAGA and others providers. So the inputs can look like this: ##QgsProcessingParameterFeatureSource|INPUT|Vector layer specifies that there will be variable INPUT that will be a vector. ##QgsProcessingParameterField|FIELDS|Attributes|None|INPUT|-1|False|False specifies that there will be variable FIELDS that will be a field index. ##QgsProcessingParameterRasterLayer|INPUT|Grid specifies that there will be variable INPUT that will be a raster. ##QgsProcessingParameterNumber|SIZE|Aggregation Size|QgsProcessingParameterNumber.Integer|10 specifies that there will be variable Size that will be numeric, and a default value for Size will be 10 . ##QgsProcessingParameterEnum|METHOD|Method|[0] Sum;[1] Min;[2] Max specifies that there will be variable METHOD that will be a value provided under [] . ##QgsProcessingParameterVectorDestination|OUTPUT|Result specifies that there will be variable OUTPUT that will be the destination file. Feature source QgsProcessingParameterFeatureSource|name|description|geometry type|default value|optional * name is mandatory * description is mandatory * geometry type is optional and the default value is -1 for any geometry, the available values are 0 for point, 1 for line, 2 for polygon, 5 for table * default value is optional and the default value is None * optional is optional and the default value is False ##QgsProcessingParameterFeatureSource|INPUT|Points|0 specifies that there will be variable INPUT that will be a vector point layer. ##QgsProcessingParameterFeatureSource|INPUT|Lines|1 specifies that there will be variable INPUT that will be a vector line layer. ##QgsProcessingParameterFeatureSource|INPUT|Polygons|2 specifies that there will be variable INPUT that will be a vector polygon layer. ##QgsProcessingParameterFeatureSource|INPUT|Table|5 specifies that there will be variable INPUT that will be a vector layer to provide table. ##QgsProcessingParameterFeatureSource|INPUT|Optional layer|-1|None|True specifies that there will be variable INPUT that will be an optional vector layer. Raster layer QgsProcessingParameterRasterLayer|name|description|default value|optional * name is mandatory * description is mandatory * default value is optional and the default value is None * optional is optional and the default value is False File or folder parameter QgsProcessingParameterFile|name|description|behavior|extension|default value|optional|file filter * name is mandatory * description is mandatory * behavior is optional and the default value is 0 for file, 1 is for folder input parameter * extension is optional and specifies a file extension associated with the parameter (e.g. html ). Use file filter for a more flexible approach which allows for multiple file extensions. if file filter is specified it takes precedence and extension is emptied. * default value is optional and the default value is None * optional is optional and the default value is False * file filter is optional and specifies the available file extensions associted sith the parameter (e.g. PNG Files (*.png);; JPG Files (*.jpg *.jpeg) ) ##QgsProcessingParameterFile|in_file|Input file specifies that there will be variable in_file that will be any file. ##QgsProcessingParameterFile|in_folder|Input folder|1 specifies that there will be variable in_folder that will be a folder. ##QgsProcessingParameterFile|in_gpkg|Input gpkg|0|gpkg specifies that there will be variable in_gpkg that will be gpkg file. ##QgsProcessingParameterFile|in_img|Input img|0|png|None|False|PNG Files (*.png);; JPG Files (*.jpg *.jpeg) specifies that there will be variable in_img that will be an image PNG or JPG. Outputs The outputs of R script are specified as ##variable_name=output output_type . This line also specifies how tool UI will look in QGIS, as outputs are one section of the tool UI. In this specification variable_name specifies variable from the script that will be exported back to QGIS, output_type is one of the allowed types that can be returned from R script (layer, raster, folder, file, HTML, number, string, table). So the outputs can look like this: ##New_string=output string specifies that a variable New_string will be set in the script. ##New_number=output number specifies that a variable New_number will be set in the script. Layer outputs For layer outputs, the line definition can end with the noprompt keyword. In this case, the variable_name has to be defined in the script. Otherwise, the UI will display a widget to let the user defined the output destination. ##New_layer=output vector specifies that the variable New_layer will be imported to QGIS as a vector layer. ##New_raster=output raster specifies that variable New_raster will be imported to QGIS as a raster layer. ##New_table=output table specifies that the variable New_table will be imported to QGIS as a vector layer without geometry (CSV file). Folder and files outputs Like layer outputs, the folder and files outputs the line definition can end with the noprompt keyword. ##New_file=output file specifies that there will be variable New_file that will be a file path with .file extension ##New_csv=output file csv specifies that there will be variable New_csv that will be a file path with .csv extension ##New_folder=output folder specifies that there will be variable New_folder that will be a folder path Printing from R to tool log If any output of any line in R script should be outputted to tool log, it needs to be preceded by > . So, for example, the following code will print the number of rows in Layer . >nrow(Layer)","title":"Script syntax"},{"location":"script-syntax/#script-syntax","text":"The R scripts for the plugin use extension .rsx . These are classic R scripts with several metadata lines (starting with ## ) that define the interaction between QGIS and R. Metadata amongst other things specify how UI of the tool will look like. The script loads necessary packages by itself. Combination of sp and rgdal or sf for vector data and sp and rgdal or raster for raster data. Any other packages need to be directly loaded using library() command in the script body.","title":"Script syntax"},{"location":"script-syntax/#metadata","text":"The R script's file name is used to define the script name and id in the R processing provider. You can override these default metadata with these lines. ##script_name=name script_name is the name of the script; under this name, it will be listed in processing toolbox. It is also used to define the script id in the R processing provider. ##script_title=display_name script_title is the title of the script; under this title, it will be listed in processing toolbox. It overrides the name if it is defined after. ##group_name=group group_name is the name of the group of the script, which allows sorting of scripts into groups in processing toolbox.","title":"Metadata"},{"location":"script-syntax/#script-behaviour","text":"Several metadata lines define the general behaviour of the script. ##output_plots_to_html (older version of this metadata keyword is ##showplots ) defines that there will be graphical output from the script that will be presented as an HTML page with images. ##load_raster_using_rgdal (legacy alias ##dontuserasterpackage ) specifies that raster data should not be pased to R using raster package as RasterLayer or RasterBrick object. Raster data are instead read using rgdal into object SpatialGridDataFrame from sp . ##load_vector_using_rgdal specifies that vector data should not be pased to R using sf package as sf data.frame . Instead data are passed as Spatial?DataFrame (where ? is the type of vector object) from sp package. ##pass_filenames (legacy alias ##passfilenames ) specifies that data are not passed directly. Instead only their file names are passed. ##dont_load_any_packages specifies that no packages, besides what is directly specified in script, should be loaded. This means that neither of sf , raster , sp or rgdal packages is loaded automatically. If spatial data (either raster or vector) should be passed to this script, the metadata ##pass_filenames should be used as well. ##user1/repo1,user2/repo2=github_install allows instalation of R packages from GitHub using remotes . Multiple repos can be specified and divided by coma, white spaces around are stripped. The formats for repository specification are listed on remotes website .","title":"Script behaviour"},{"location":"script-syntax/#inputs","text":"","title":"Inputs"},{"location":"script-syntax/#simple-specification","text":"The inputs to R script are specified as: variable_name=variable_type [default_value/from_variable] . This metadata line also specifies how tool UI will look in QGIS, as inputs are one section of the tool UI. In this specification variable_name is the name of the variable used in R script, variable_type is a type of input variable from possible input types (vector, raster, table, number, string, boolean, Field). This metadata line is based on the QGIS parameter asScriptCode / fromScriptCode string definition. The default_value is applicable to number, string, boolean, range, color folder and file inputs. The from variable_ applies to Field and must point to variable_name of vector input. So the inputs can look like this: ##Layer=vector specifies that there will be variable Layer that will be a vector. ##X=Field Layer specifies that variable X will be field name taken from Layer . ##Size=number 10 specifies that there will be variable Size that will be numeric, and a default value for Size will be 10 . ##Extent=extent specifies that there will be variable Extent that will be numeric of length 4 ( xmin , xmax , ymin and ymax values). ##CRS=crs specifies that there will be variable CRS that will be EPSG:____ string. ##Range=range 0,1 specifies that the Range variable will be a two numeric values vector with names (min/max values). The parameter accepts default values, e.g. 0,1 . A range widget will be displayed for setting the values. ##Color=color withopacity #FF0000CC specifies that the Color variable will be a text string of the chosen color in hexadecimal format. This parameter will display a color selection widget. The parameter accepts default values, for example #FF0000 . The opacity value depends on the withopacity option. ##Date_Time=datetime specifies that the Date_Time variable will be a POSIXct vector of length 1 of the date and time choosing from the datetime widget . The parameter does not accept default values, instead, the current date and time will set by default.","title":"Simple specification"},{"location":"script-syntax/#enum","text":"The basic enum syntax is ##var_enum=enum a;b;c to select from values a , b or c . The value of var_enum in this case will be integer indicated position of the selected item in a list. So for example, if a is selected the value of var_enum will be 0 . The approach described above works well for a wide range of applications but for R it is often not ideal. That is a reason why a new type of enum is available in script syntax. The syntax is ##var_enum_string=enum literal a;b;c . The important part here is the keyword literal (or more precisely enum literal ) which specifies that the value from the select box to var_enum_string should be passed as a string. So if b is selected, then the value of var_enum_string will be \"a\" .","title":"Enum"},{"location":"script-syntax/#advanced-specification","text":"The inputs to R script are specified as: QgsProcessingParameter|name|description|other_parameters_separated_by_pipe . The other parameter_ separated_ by_ pipe_ can contain the QgsProcessingParameter specific parameters. This metadata line is based on the QGIS definitions used in description file used by GRASS7, SAGA and others providers. So the inputs can look like this: ##QgsProcessingParameterFeatureSource|INPUT|Vector layer specifies that there will be variable INPUT that will be a vector. ##QgsProcessingParameterField|FIELDS|Attributes|None|INPUT|-1|False|False specifies that there will be variable FIELDS that will be a field index. ##QgsProcessingParameterRasterLayer|INPUT|Grid specifies that there will be variable INPUT that will be a raster. ##QgsProcessingParameterNumber|SIZE|Aggregation Size|QgsProcessingParameterNumber.Integer|10 specifies that there will be variable Size that will be numeric, and a default value for Size will be 10 . ##QgsProcessingParameterEnum|METHOD|Method|[0] Sum;[1] Min;[2] Max specifies that there will be variable METHOD that will be a value provided under [] . ##QgsProcessingParameterVectorDestination|OUTPUT|Result specifies that there will be variable OUTPUT that will be the destination file.","title":"Advanced specification"},{"location":"script-syntax/#feature-source","text":"QgsProcessingParameterFeatureSource|name|description|geometry type|default value|optional * name is mandatory * description is mandatory * geometry type is optional and the default value is -1 for any geometry, the available values are 0 for point, 1 for line, 2 for polygon, 5 for table * default value is optional and the default value is None * optional is optional and the default value is False ##QgsProcessingParameterFeatureSource|INPUT|Points|0 specifies that there will be variable INPUT that will be a vector point layer. ##QgsProcessingParameterFeatureSource|INPUT|Lines|1 specifies that there will be variable INPUT that will be a vector line layer. ##QgsProcessingParameterFeatureSource|INPUT|Polygons|2 specifies that there will be variable INPUT that will be a vector polygon layer. ##QgsProcessingParameterFeatureSource|INPUT|Table|5 specifies that there will be variable INPUT that will be a vector layer to provide table. ##QgsProcessingParameterFeatureSource|INPUT|Optional layer|-1|None|True specifies that there will be variable INPUT that will be an optional vector layer.","title":"Feature source"},{"location":"script-syntax/#raster-layer","text":"QgsProcessingParameterRasterLayer|name|description|default value|optional * name is mandatory * description is mandatory * default value is optional and the default value is None * optional is optional and the default value is False","title":"Raster layer"},{"location":"script-syntax/#file-or-folder-parameter","text":"QgsProcessingParameterFile|name|description|behavior|extension|default value|optional|file filter * name is mandatory * description is mandatory * behavior is optional and the default value is 0 for file, 1 is for folder input parameter * extension is optional and specifies a file extension associated with the parameter (e.g. html ). Use file filter for a more flexible approach which allows for multiple file extensions. if file filter is specified it takes precedence and extension is emptied. * default value is optional and the default value is None * optional is optional and the default value is False * file filter is optional and specifies the available file extensions associted sith the parameter (e.g. PNG Files (*.png);; JPG Files (*.jpg *.jpeg) ) ##QgsProcessingParameterFile|in_file|Input file specifies that there will be variable in_file that will be any file. ##QgsProcessingParameterFile|in_folder|Input folder|1 specifies that there will be variable in_folder that will be a folder. ##QgsProcessingParameterFile|in_gpkg|Input gpkg|0|gpkg specifies that there will be variable in_gpkg that will be gpkg file. ##QgsProcessingParameterFile|in_img|Input img|0|png|None|False|PNG Files (*.png);; JPG Files (*.jpg *.jpeg) specifies that there will be variable in_img that will be an image PNG or JPG.","title":"File or folder parameter"},{"location":"script-syntax/#outputs","text":"The outputs of R script are specified as ##variable_name=output output_type . This line also specifies how tool UI will look in QGIS, as outputs are one section of the tool UI. In this specification variable_name specifies variable from the script that will be exported back to QGIS, output_type is one of the allowed types that can be returned from R script (layer, raster, folder, file, HTML, number, string, table). So the outputs can look like this: ##New_string=output string specifies that a variable New_string will be set in the script. ##New_number=output number specifies that a variable New_number will be set in the script.","title":"Outputs"},{"location":"script-syntax/#layer-outputs","text":"For layer outputs, the line definition can end with the noprompt keyword. In this case, the variable_name has to be defined in the script. Otherwise, the UI will display a widget to let the user defined the output destination. ##New_layer=output vector specifies that the variable New_layer will be imported to QGIS as a vector layer. ##New_raster=output raster specifies that variable New_raster will be imported to QGIS as a raster layer. ##New_table=output table specifies that the variable New_table will be imported to QGIS as a vector layer without geometry (CSV file).","title":"Layer outputs"},{"location":"script-syntax/#folder-and-files-outputs","text":"Like layer outputs, the folder and files outputs the line definition can end with the noprompt keyword. ##New_file=output file specifies that there will be variable New_file that will be a file path with .file extension ##New_csv=output file csv specifies that there will be variable New_csv that will be a file path with .csv extension ##New_folder=output folder specifies that there will be variable New_folder that will be a folder path","title":"Folder and files outputs"},{"location":"script-syntax/#printing-from-r-to-tool-log","text":"If any output of any line in R script should be outputted to tool log, it needs to be preceded by > . So, for example, the following code will print the number of rows in Layer . >nrow(Layer)","title":"Printing from R to tool log"}]}